package study.jsp.mysite.controller.bbs;

import java.io.IOException;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.catalina.tribes.group.interceptors.FragmentationInterceptor;
import org.apache.ibatis.session.SqlSession;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import jdk.nashorn.internal.runtime.regexp.joni.Regex;
import study.jsp.helper.BaseController;
import study.jsp.helper.FileInfo;
import study.jsp.helper.RegexHelper;
import study.jsp.helper.UploadHelper;
import study.jsp.helper.WebHelper;
import study.jsp.mysite.dao.MyBatisConnectionFactory;
import study.jsp.mysite.impl.BbsDocumentServiceImpl;
import study.jsp.mysite.impl.BbsFileServiseImpl;
import study.jsp.mysite.model.BbsDocument;
import study.jsp.mysite.model.BbsFile;
import study.jsp.mysite.model.Member;
import study.jsp.mysite.service.BbsDocumentService;
import study.jsp.mysite.service.BbsFileService;
@WebServlet("/bbs/document_edit_ok.do")
public class DocumentEditOk extends BaseController {
	private static final long serialVersionUID = 6022989565335488671L;
	WebHelper web;
	BBSCommon bbs;
	SqlSession sqlSession;
	Logger logger;
	UploadHelper upload;
	BbsDocumentService bbsDocumentService;
	BbsFileService bbsFileService;
	RegexHelper regex;
	
	@Override
	public String doRun(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		web = WebHelper.getInstance(request, response);
		bbs = BBSCommon.getInstance();
		sqlSession = MyBatisConnectionFactory.getSqlSession();
		logger=LogManager.getFormatterLogger(request.getRequestURI());
		upload = UploadHelper.getInstance();
		bbsDocumentService = new BbsDocumentServiceImpl(sqlSession, logger);
		bbsFileService = new BbsFileServiseImpl(sqlSession, logger); 
		regex = RegexHelper.getInstance();
		
		/**파일이 포함된 POST 파라미터 받기*/
		try {
			upload.multipatRequest(request);
		} catch (Exception e) {
			sqlSession.close();
			web.redirect(null, "multipart데이터가 아닙니다");
			return null;
		}
		/**UploadHelper에서 텍스트 형식의 값을 추출*/
		Map<String, String> paramMap = upload.getParamMap();
		//글번호 가져오기-->Map에서 가져오는 값은 모두 String이므로 변환 필요
		int documentId= 0;
		try {
			documentId=Integer.parseInt(paramMap.get("documentId"));	
		} catch (Exception e) {
			sqlSession.close();
			web.redirect(null, "글 번호가 올바르지 않습니다");
			return null;
		}
		String category = paramMap.get("category");
		String writerName = paramMap.get("writerName");
		String writerPw = paramMap.get("writerPw");
		String email = paramMap.get("email");
		String subject = paramMap.get("subject");
		String content = paramMap.get("content");
		//작성자 아이피주고 가져오기
		String ipAddress = web.getClientIP();
		//회원 일련번호 -->비 로그인인 경우 0 
		int memberId=0;
		
		
		/**게시판 카테고리 값을 받아서 View에 전달*/
		//String category = web.getString("category");
		request.setAttribute("category", category);
		/**존재하는 게시판인지 판별하기*/
		try {
			String bbsName = bbs.getBbsName(category);
			request.setAttribute("bbsName", bbsName);
		} catch (Exception e) {
			sqlSession.close();
			web.redirect(null, e.getLocalizedMessage());
			return null;
		}
	/**로그인 한 경우 자신의 글이라면 입력하지 않은 겅보를 세션 데이터로 데체한다*/
	//소유권 검사 정보
	boolean MyDocument = false;
	
	Member loginInfo = (Member) web.getSession("loginInfo");
	if(loginInfo !=null){
		try {
			//소유권 판정을 위하여 사용하는 임시 객체
			BbsDocument temp = new BbsDocument();
			temp.setCategory(category);
			temp.setId(documentId);
			temp.setMemberId(loginInfo.getId());
			
			if (bbsDocumentService.selectDocumentCountMemberId(temp) > 0) {
				//소유권을 의미하는 변수 변경
				MyDocument = true;
				writerName = loginInfo.getName();
				email=loginInfo.getEmail();
				writerPw= loginInfo.getUserPw();
				memberId = loginInfo.getId();
			}
		} catch (Exception e) {
			sqlSession.close();
			web.redirect(null, e.getLocalizedMessage());
			return null;
		}
	}
	//전달된 파라미터는 로그로 확인한다
	logger.debug("documentId="+ documentId);
	logger.debug("category="+category);
	logger.debug("writer_name="+writerName);
	logger.debug("writer_pw="+writerPw);
	logger.debug("email="+email);
	logger.debug("subject="+subject);
	logger.debug("ipAddress="+ipAddress);
	logger.debug("memberId="+memberId);
	
	
	/**7)유효성 검사*/
	if(!regex.isValue(writerName)){
		web.redirect(null, "작성자 이름을 입력해주세요");
		return null;
	}
	if(!regex.isValue(writerPw)){
		web.redirect(null, "비밀번호를 입력해주세요");
		return null;
	}
	//받는 사람 메일 주소 검사하기
	if(!regex.isValue(email)){
		web.redirect(null, "이메일을 입력하세요");
		return null;
	}
	if(!regex.isEmail(email)){
		web.redirect(null, "이메일 형식이 잘못외었습니다");
		return null;
	}
	//메일 제목 --> null체크도 입력 여부를 확인할수 있다.
	if(!regex.isValue(subject)){
		web.redirect(null, "글 제목을 입력하세요");
		return null;
	}
	if(!regex.isValue(content)){
		web.redirect(null, "내용을 입력하세요");
		return null;
	}
	/**입력받은 파라미터를 Beans로 묶기*/
	BbsDocument document = new BbsDocument();
	document.setId(documentId);
	document.setCategory(category);
	document.setWriterName(writerName);
	document.setWriterPw(writerPw);
	document.setEmail(email);
	document.setSubject(subject);
	document.setContent(content);
	document.setIpAddress(ipAddress);
	document.setMemberId(memberId);
	logger.debug(document.toString());
	
	//자신의 글이 아니라면 비밀번호 검사를 번저 수행한다
	try {
		if (!MyDocument) {
			bbsDocumentService.selectDocumentCountByPw(document);	
		}
		bbsDocumentService.updateDocument(document);
	} catch (Exception e) {
		sqlSession.close();
		web.redirect(null, e.getLocalizedMessage());
		return null;
	}
	
	/**삭제를 선택한 첨부파일에 대한 처리*/
	String delFile = paramMap.get("del_file");
	
	if (delFile!=null) {
		String[] delFileList = delFile.split(",");
		
	for (int i = 0; i < delFileList.length; i++) {
		try {
			BbsFile file = new BbsFile();
			file.setId(Integer.parseInt(delFileList[i]));
			//개별 파일에 대한 정보를 조회하여 실제 파일을 삭제한다
			BbsFile item=bbsFileService.selectFile(file);
			upload.removeFile(item.getFileDir()+"/" +item.getFileName());
			//DB에서 파일 정보 삭제 처리
			bbsFileService.deleteFile(file);
			} catch (Exception e) {
				sqlSession.close();
				web.redirect(null, e.getLocalizedMessage());
				return null;
			}
		}
	}
	/**추가적으로 업로드 된 파일 정보 처리*/
	List<FileInfo> fileInfoList = upload.getFileList();
	//업로드 된 파일의 수 만큼 반복 처리 한다
	for (int i = 0; i < fileInfoList.size(); i++) {
		//업로드 된 정보 하나 추출
		//---> 업로드 된 정보를 데이터베이스에서 저장하기 위한 형태로 가공해야 한다.
		FileInfo info = fileInfoList.get(i);
		//DB에 저장하기 위한 항목 하나 생성
		BbsFile file = new BbsFile();
		//데이터복사
		file.setOriginName(info.getOriginName);
		file.setFileDir(info.getFileDir);
		file.setFileName(info.getFileName);
		file.setContentType(info.getContentType);
		file.setFileSize(info.getFileSize);
		//어느 게시물에 속한 파일인지 인식해야 하므로 글 번호 추가
		
		//복사된 데이터를 DB에 저장
		
	}
	return ipAddress;
	}
	}
	
	




















