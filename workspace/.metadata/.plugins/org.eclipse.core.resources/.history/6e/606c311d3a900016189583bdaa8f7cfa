package study.jsp.mysite.controller.bbs;

import java.io.IOException;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.ibatis.session.SqlSession;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.sun.xml.internal.txw2.Document;

import study.jsp.helper.BaseController;
import study.jsp.helper.FileInfo;
import study.jsp.helper.RegexHelper;
import study.jsp.helper.UploadHelper;
import study.jsp.helper.WebHelper;
import study.jsp.mysite.dao.MyBatisConnectionFactory;
import study.jsp.mysite.impl.BbsDocumentServiceImpl;
import study.jsp.mysite.impl.BbsFileServiseImpl;
import study.jsp.mysite.model.BbsDocument;
import study.jsp.mysite.model.Member;
import study.jsp.mysite.service.BbsDocumentService;
import study.jsp.mysite.service.BbsFileService;
@WebServlet("/bbs/document_write_ok.do")
public class DocumentWriteOk extends BaseController {
	private static final long serialVersionUID = -7786870605257149925L;
	WebHelper web;
	BBSCommon bbs;
	Logger logger;
	SqlSession sqlSession;
	UploadHelper upload;
	RegexHelper regex;
	BbsDocumentService bbsDocumentService;
	BbsFileService bbsFileService;
	@Override
	public String doRun(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		web = WebHelper.getInstance(request, response);
		bbs = BBSCommon.getInstance();
		sqlSession = MyBatisConnectionFactory.getSqlSession();
		logger = LogManager.getFormatterLogger(request.getRequestURL());
		upload = UploadHelper.getInstance();
		regex = RegexHelper.getInstance();
		bbsDocumentService = new BbsDocumentServiceImpl(sqlSession, logger);
		bbsFileService = new BbsFileServiseImpl(sqlSession, logger);
		
		/**3)파라미터 받기*/
		try {
			upload.multipatRequest(request);
		} catch (Exception e1) {
			sqlSession.close();
			web.redirect(null, "mulltipart 데이터가 아닙니다");
			return null;
		}
		/**4) 업로드 헬퍼에서 텍스트 형식값 추출*/
		Map<String, String> paramMap = upload.getParamMap();
		String category = paramMap.get("categoey");
		String writerName = paramMap.get("write_name");
		String writerPw =paramMap.get("writer_pw");
		String email=paramMap.get("eamil");
		String subject=paramMap.get("subject");
		String content=paramMap.get("content");
		//작성자 아이피주소 가져오기
		String ipAddress=paramMap.get("ip_address");
		// 회원일련번호 -->비 로인인 경우 0
		int memberId = 0;
		//로그인한 경우 입력하지 않은 이름 비밀번호 이메일을 세션정보로 대체
		Member loginInfo = (Member) web.getSession("loginInfo");
		if (loginInfo != null) {
			writerName = loginInfo.getName();
			memberId = loginInfo.getId();
			writerPw = loginInfo.getUserPw();
			email = loginInfo.getEmail();
		}
		logger.debug("category="+ category);
		logger.debug("writerName="+ writerName);
		logger.debug("writerPw="+writerPw);
		logger.debug("email="+email);
		logger.debug("subject="+subject);
		logger.debug("content="+content);
		logger.debug("ipAddress="+ipAddress);
		logger.debug("memberId="+memberId);
		/**5)게시판 카테고리 값을 받아서 View에 전달*/
		//파일이 첨부된 경우 webhelper를 사용할수 없다
		//String category = web.get.category("category");
		//String category = web.getString("category");
		request.setAttribute("category", category);
		/**6)존재하는 게시판인지 판별하기*/
		try {
			String bbsName = bbs.getBbsName(category);
			request.setAttribute("bbsName", bbsName);
		} catch (Exception e) {
			sqlSession.close();
			web.redirect(null, e.getLocalizedMessage());
			return null;
		}
		/**7)유효성 검사*/
		if(!regex.isValue(writerName)){
			web.redirect(null, "작성자 이름을 입력해주세요");
			return null;
		}
		if(!regex.isValue(writerPw)){
			web.redirect(null, "비밀번호를 입력해주세요");
			return null;
		}
		//받는 사람 메일 주소 검사하기
		if(!regex.isValue(email)){
			web.redirect(null, "이메일을 입력하세요");
			return null;
		}
		if(!regex.isEmail(email)){
			web.redirect(null, "이메일 형식이 잘못외었습니다");
			return null;
		}
		//메일 제목 --> null체크도 입력 여부를 확인할수 있다.
		if(!regex.isValue(subject)){
			web.redirect(null, "글 제목을 입력하세요");
			return null;
		}
		if(!regex.isValue(content)){
			web.redirect(null, "내용을 입력하세요");
			return null;
		}
		/**8)입력받은 파라미터를 빈드에 받기*/
		BbsDocument bbsdocument = new BbsDocument();
		bbsdocument.setCategory(category);
		bbsdocument.setEmail(email);
		bbsdocument.setWriterName(writerName);
		bbsdocument.setWriterPw(writerPw);
		bbsdocument.setSubject(subject);
		bbsdocument.setContent(content);
		bbsdocument.setMemberId(memberId);
		bbsdocument.setIpAddress(ipAddress);
		logger.debug("document>> + " + bbsdocument.toString());
		/**9)서비스를 통한 게시물 저장*/
		try {
			bbsDocumentService.insertDocument(bbsdocument);
		} catch (Exception e) {
			sqlSession.close();
			web.redirect(null, e.getLocalizedMessage());
			e.printStackTrace();
			return null;
		}
		/**10)첨부파일 목록 처리*/
		//업로드 된 파일 목록
		List<FileInfo> fileList = upload.getFileList();
		try {
			for (int i = 0; i < fileList.size(); i++) {
				FileInfo info = fileList.get(i);
				
			}
			
		} catch (Exception e) {
			web.redirect(null, e.getLocalizedMessage());
			return null;
		}finally{
			sqlSession.close();
		}
		
		
		
		/**11)*/
		
		/**존재하는 게시판인지 판별하기*/
		try {
			String bbsName = bbs.getBbsName(category);
			request.setAttribute("bbsName", bbsName);
		} catch (Exception e) {
			web.redirect(null, e.getLocalizedMessage());
			return null;
		}
		return null;
	}

}
