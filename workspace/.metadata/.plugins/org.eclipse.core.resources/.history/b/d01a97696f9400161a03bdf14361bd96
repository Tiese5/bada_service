package study.jsp.mysite.impl;

import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.apache.logging.log4j.Logger;

import study.jsp.mysite.model.BbsDocument;
import study.jsp.mysite.service.BbsDocumentService;

public class BbsDocumentServiceImpl implements BbsDocumentService{
	Logger logger;
	SqlSession sqlSession;
	
	public BbsDocumentServiceImpl(SqlSession sqlSession,Logger logger) {
		this.sqlSession=sqlSession;
		this.logger=logger;
	}
	@Override
	public void insertDocument(BbsDocument document) throws Exception {
		//수정 삭제 입력 패턴
		try {
				//ProfessorMapper.updateProfessorItem 기능을 호출한다.
				//두번째 파라미터는 저장할 데이터를 담고있는 Beans객체
				int result = sqlSession.insert("BbsDocumentMapper.insertDocument",document);
				//리턴값이 저장된 행의 수
				if (result == 0) {
					// 저장된 행이 없다면 강제로 예외를 발생시킨다
					//-->이 예외를 처리 가능한 catch 블록으로 제어가 이동한다.
					throw new NullPointerException();
					}	
				} catch (NullPointerException e) {
					//에러가 발생했으므로 SQl 수행 내역을 되돌림
					sqlSession.rollback();
					System.out.println(e.getLocalizedMessage());
					System.out.println("저장된 게시물이 없습니다");
					return;
				} catch (Exception e) {
					//에러가 발생했으므로 SQL 수행 내역을 되돌림
					sqlSession.rollback();	//SQl문 문법에러 제약조건 
					e.printStackTrace();
					System.out.println("게시물 정보 등록에 실패했습니다");
					return;
				}finally {
					//입력,수정,삭제 처리의 경우 실레 반영을 위해서 commit 필요함
					sqlSession.commit();
					//데이터 베이스 접속 해제	
				}
	}
	@Override
	public BbsDocument selectDocument(BbsDocument document) throws Exception {
		BbsDocument result = null;
		try {
			//ProfessorMapper.updateProfessorItem 기능을 호출한다.
			//두번째 파라미터는 저장할 데이터를 담고있는 Beans객체
			result = sqlSession.selectOne("BbsDocumentMapper.selectDocument",document);
			//리턴값이 저장된 행의 수
			if (result == null) {
				// 저장된 행이 없다면 강제로 예외를 발생시킨다
				//-->이 예외를 처리 가능한 catch 블록으로 제어가 이동한다.
				throw new NullPointerException();
				}	
			} catch (NullPointerException e) {
				//에러가 발생했으므로 SQl 수행 내역을 되돌림
				System.out.println("조회된 게시물이 없습니다");
			} catch (Exception e) {
				//에러가 발생했으므로 SQL 수행 내역을 되돌림
				logger.error(e.getLocalizedMessage());
				throw new Exception("게시물 조회에 실패 했습니다 ");
			}finally {
				//입력,수정,삭제 처리의 경우 실레 반영을 위해서 commit 필요함
				sqlSession.commit();
				//데이터 베이스 접속 해제
			}
		return result;
	}
	@Override
	public BbsDocument selectPrevDocument(BbsDocument document) throws Exception {
		BbsDocument result = null;
		try {
			//ProfessorMapper.updateProfessorItem 기능을 호출한다.
			//두번째 파라미터는 저장할 데이터를 담고있는 Beans객체
			result = sqlSession.selectOne("BbsDocumentMapper.selectPrevDocument",document);
		}catch (Exception e) {
			//에러가 발생했으므로 SQL 수행 내역을 되돌림
			logger.error(e.getLocalizedMessage());
			throw new Exception("이전글 조회에 실패 했습니다 ");
		}finally {
			//입력,수정,삭제 처리의 경우 실레 반영을 위해서 commit 필요함
			sqlSession.commit();
			//데이터 베이스 접속 해제
		}
		return result;
	}
	@Override
	public BbsDocument selectNextDocument(BbsDocument document) throws Exception {
		BbsDocument result = null;
		try {
			//ProfessorMapper.updateProfessorItem 기능을 호출한다.
			//두번째 파라미터는 저장할 데이터를 담고있는 Beans객체
			result = sqlSession.selectOne("BbsDocumentMapper.selectNextDocument",document);
		}catch (Exception e) {
			//에러가 발생했으므로 SQL 수행 내역을 되돌림
			logger.error(e.getLocalizedMessage());
			throw new Exception("다음글 조회에 실패 했습니다 ");
		}finally {
			//입력,수정,삭제 처리의 경우 실레 반영을 위해서 commit 필요함
			sqlSession.commit();
			//데이터 베이스 접속 해제
		}
		return result;
	}
	@Override
	public void updeteDocumentHit(BbsDocument document) throws Exception {
		try {
		//ProfessorMapper.updateProfessorItem 기능을 호출한다.
		//두번째 파라미터는 저장할 데이터를 담고있는 Beans객체
		int result = sqlSession.update("BbsDocumentMapper.updeteDocumentHit",document);
		//리턴값이 저장된 행의 수
		if (result == 0) {
			// 저장된 행이 없다면 강제로 예외를 발생시킨다
			//-->이 예외를 처리 가능한 catch 블록으로 제어가 이동한다.
			throw new NullPointerException();
			}	
		} catch (NullPointerException e) {
			//에러가 발생했으므로 SQl 수행 내역을 되돌림
			sqlSession.rollback();
			System.out.println("존재하지 않는 게시물에 대한 요청입니다");
			return;
		} catch (Exception e) {
			//에러가 발생했으므로 SQL 수행 내역을 되돌림
			sqlSession.rollback();	//SQl문 문법에러 제약조건 
			e.printStackTrace();
			System.out.println("조회수 갱신에 실패 했습니다");
			return;
		}finally {
			//입력,수정,삭제 처리의 경우 실레 반영을 위해서 commit 필요함
			sqlSession.commit();
		}
	}
	@Override
	public List<BbsDocument> selelctDocumentList(BbsDocument document) throws Exception {
		List<BbsDocument> result = null;
		try {
			//ProfessorMapper.updateProfessorItem 기능을 호출한다.
			//두번째 파라미터는 저장할 데이터를 담고있는 Beans객체
			result = sqlSession.selectList("BbsDocumentMapper.selelctDocumentList",document);
			//리턴값이 저장된 행의 수
			if (result == null) {
				// 저장된 행이 없다면 강제로 예외를 발생시킨다
				//-->이 예외를 처리 가능한 catch 블록으로 제어가 이동한다.
				throw new NullPointerException();
				}	
			} catch (NullPointerException e) {
				//에러가 발생했으므로 SQl 수행 내역을 되돌림
				System.out.println("조회된 데이터가 없습니다");
			} catch (Exception e) {
				//에러가 발생했으므로 SQL 수행 내역을 되돌림
				logger.error(e.getLocalizedMessage());
				throw new Exception("데이터 조회에 실패 했습니다 ");
			}finally {
				//입력,수정,삭제 처리의 경우 실레 반영을 위해서 commit 필요함
				sqlSession.commit();
				//데이터 베이스 접속 해제	
			}
		return result;
	}
	@Override
	public int selectDocumentCount(BbsDocument document) throws Exception {
		int result = 0;
		try {
			//ProfessorMapper.updateProfessorItem 기능을 호출한다.
			//두번째 파라미터는 저장할 데이터를 담고있는 Beans객체
			result = sqlSession.selectOne("BbsDocumentMapper.selectDocumentCount",document);
			//리턴값이 저장된 행의 수
			} catch (Exception e) {
				//에러가 발생했으므로 SQL 수행 내역을 되돌림
				logger.error(e.getLocalizedMessage());
				throw new Exception("데이터 조회에 실패 했습니다 ");
			}
				
		return result;
	}
	@Override
	public int selectDocumentCountMemberId(BbsDocument document) throws Exception {
		int result = 0;
		try {
			//ProfessorMapper.updateProfessorItem 기능을 호출한다.
			//두번째 파라미터는 저장할 데이터를 담고있는 Beans객체
			result = sqlSession.selectOne("BbsDocumentMapper.selectDocumentCountMemberId",document);
			//리턴값이 저장된 행의 수
			} catch (Exception e) {
				//에러가 발생했으므로 SQL 수행 내역을 되돌림
				logger.error(e.getLocalizedMessage());
				throw new Exception("게시물 수  조회에 실패 했습니다 ");
			}

		return result;
	}
	@Override
	public int selectDocumentCountByPw(BbsDocument document) throws Exception {
		int result = 0;
		try {
			//ProfessorMapper.updateProfessorItem 기능을 호출한다.
			//두번째 파라미터는 저장할 데이터를 담고있는 Beans객체
			result = sqlSession.selectList("ProfessorMapper.selectProfessorList",professor);
			//리턴값이 저장된 행의 수
			if (result == ) {
				// 저장된 행이 없다면 강제로 예외를 발생시킨다
				//-->이 예외를 처리 가능한 catch 블록으로 제어가 이동한다.
				throw new NullPointerException();
				}	
			} catch (NullPointerException e) {
				//에러가 발생했으므로 SQl 수행 내역을 되돌림
				System.out.println("조회된 데이터가 없습니다");
			} catch (Exception e) {
				//에러가 발생했으므로 SQL 수행 내역을 되돌림
				logger.error(e.getLocalizedMessage());
				throw new Exception("데이터 조회에 실패 했습니다 ");
			}finally {
				//입력,수정,삭제 처리의 경우 실레 반영을 위해서 commit 필요함
				sqlSession.commit();
				//데이터 베이스 접속 해제
				
			}

		
		return result;
	}
	@Override
	public void deleteDocument(BbsDocument document) throws Exception {
		// TODO Auto-generated method stub
		
	}
}
